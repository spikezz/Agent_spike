// 1. Import Base Documents
LOAD CSV WITH HEADERS FROM 'file:///create_base_documents.csv' AS row
CREATE (bd:BaseDocument {
    id: row.id,
    title: row.title,
    raw_content: row.raw_content,
    text_unit_ids: row.text_unit_ids
});

// 2. Import Base Text Units
LOAD CSV WITH HEADERS FROM 'file:///create_base_text_units.csv' AS row
CREATE (bt:BaseTextUnit {
    id: row.id,
    chunk: row.chunk,
    chunk_id: row.chunk_id,
    document_ids: row.document_ids,
    n_tokens: toFloat(row.n_tokens)
});

// 3. Import Final Communities
LOAD CSV WITH HEADERS FROM 'file:///create_final_communities.csv' AS row
CREATE (c:Community {
    id: row.id,
    title: row.title,
    level: toInteger(row.level),
    raw_community: row.raw_community,
    relationship_ids: row.relationship_ids,
    text_unit_ids: row.text_unit_ids
});

//4. Import Final Community Reports
LOAD CSV WITH HEADERS FROM 'file:///create_final_community_reports.csv' AS row
CREATE (cr:CommunityReport {
    id: row.id,
    community: row.community,
    full_content: row.full_content,
    level: toInteger(row.level),
    rank: toFloat(row.rank),
    title: row.title,
    rank_explanation: row.rank_explanation,
    summary: row.summary,
    findings: row.findings,
    full_content_json: row.full_content_json
});

// 5. Import Final Documents
LOAD CSV WITH HEADERS FROM 'file:///create_final_documents.csv' AS row
CREATE (fd:FinalDocument {
    id: row.id,
    title: row.title,
    raw_content: row.raw_content,
    text_unit_ids: row.text_unit_ids
});

// 6. Import Final Entities
LOAD CSV WITH HEADERS FROM 'file:///create_final_entities.csv' AS row
CREATE (e:Entity {
    id: row.id,
    name: row.name,
    type: row.type,
    description: row.description,
    human_readable_id: toInteger(row.human_readable_id),
    text_unit_ids: row.text_unit_ids
});


// 7. Import Final Nodes
LOAD CSV WITH HEADERS FROM 'file:///create_final_nodes.csv' AS row
CREATE (n:Node {
    id: row.id,
    level: toInteger(row.level),
    title: row.title,
    type: row.type,
    description: row.description,
    source_id: row.source_id,
    community: row.community,
    degree: toInteger(row.degree),
    human_readable_id: toInteger(row.human_readable_id),
    size: toInteger(row.size),
    entity_type: row.entity_type,
    top_level_node_id: row.top_level_node_id,
    x: toInteger(row.x),
    y: toInteger(row.y)
});


// 8. Import Final Relationships
LOAD CSV WITH HEADERS FROM 'file:///create_final_relationships.csv' AS row
CREATE (r:Relationship {
    source: row.source,
    target: row.target,
    weight: toFloat(row.weight),
    description: row.description,
    id: row.id,
    human_readable_id: row.human_readable_id,
    source_degree: toInteger(row.source_degree),
    target_degree: toInteger(row.target_degree),
    rank: toInteger(row.rank),
    text_unit_ids: row.text_unit_ids
});

// 9. Import Final Text Units
LOAD CSV WITH HEADERS FROM 'file:///create_final_text_units.csv' AS row
CREATE (ft:FinalTextUnit {
    id: row.id,
    text: row.text,
    n_tokens: toFloat(row.n_tokens),
    document_ids: row.document_ids,
    entity_ids: row.entity_ids,
    relationship_ids: row.relationship_ids
});

// 10. Create indexes for better performance
CREATE INDEX FOR (bd:BaseDocument) ON (bd.id);
CREATE INDEX FOR (bt:BaseTextUnit) ON (bt.id);
CREATE INDEX FOR (c:Community) ON (c.id);
CREATE INDEX FOR (cr:CommunityReport) ON (cr.id);
CREATE INDEX FOR (fd:FinalDocument) ON (fd.id);
CREATE INDEX FOR (e:Entity) ON (e.id);
CREATE INDEX FOR (n:Node) ON (n.id);
CREATE INDEX FOR (r:Relationship) ON (r.id);
CREATE INDEX FOR (ft:FinalTextUnit) ON (ft.id);


// 11. Create relationships after all nodes are imported
MATCH (ft:FinalTextUnit)
WITH ft, trim(replace(replace(replace(ft.document_ids, "[", ""), "]", ""), "'", "")) AS cleanId
MATCH (fd:FinalDocument {id: cleanId})
CREATE (ft)-[:BELONGS_TO_DOCUMENT]->(fd);


// 12. relationships from Community
MATCH (c:Community)
WITH c, split(trim(replace(replace(replace(c.relationship_ids, "[", ""), "]", ""), "'", "")), " ") AS cleanIdList
UNWIND cleanIdList AS cleanId
WITH c, trim(cleanId) AS trimmedId
WHERE trimmedId <> ""
MATCH (r:Relationship {id: trimmedId})
CREATE (r)-[:RELATION_EXTRACTED_FROM]->(c)
RETURN count(*) AS relationshipsCreated;

// 13. FinalTextUnit from TextUnitGroup from Community
MATCH (c:Community)
WITH c, split(trim(replace(replace(replace(c.text_unit_ids, "[", ""), "]", ""), "'", "")), "\n") AS groupList
UNWIND groupList AS group
WITH c, group, trim(group) AS trimmedGroup
WHERE trimmedGroup <> ""
CREATE (g:TextUnitGroup {ids: trimmedGroup})
CREATE (g)-[:TEXT_UNIT_GROUP_BELONGS_TO_COMMUNITY]->(c)
WITH c, g, split(trimmedGroup, ",") AS idList
UNWIND idList AS id
WITH c, g, trim(id) AS trimmedId
WHERE trimmedId <> ""
MATCH (ft:FinalTextUnit {id: trimmedId})
CREATE (ft)-[:BELONGS_TO_TEXT_UNIT_GROUP]->(g);

// 14. Entity mentioned in FinalTextUnit
MATCH (ft:FinalTextUnit)
WITH ft, split(trim(replace(replace(replace(ft.entity_ids, "[", ""), "]", ""), "'", "")), " ") AS cleanIdList
UNWIND cleanIdList AS cleanId
WITH ft, trim(cleanId) AS trimmedId
WHERE trimmedId <> ""
MATCH (e:Entity {id: trimmedId})
CREATE (e)-[:ENTITY_MENTIONED_IN]->(ft)
RETURN count(*) AS relationshipsCreated;

// 15. relationships from FinalTextUnit
MATCH (ft:FinalTextUnit)
WITH ft, split(trim(replace(replace(replace(ft.relationship_ids, "[", ""), "]", ""), "'", "")), " ") AS cleanIdList
UNWIND cleanIdList AS cleanId
WITH ft, trim(cleanId) AS trimmedId
WHERE trimmedId <> ""
MATCH (r:Relationship {id: trimmedId})
CREATE (r)-[:RELATIONSHIP_BELONGS_TO]->(ft)
RETURN count(*) AS relationshipsCreated;

// 16. relationships between entity
LOAD CSV WITH HEADERS FROM 'file:///create_final_relationships.csv' AS row
MATCH (source:Entity {name: row.source})
MATCH (target:Entity {name: row.target})
CREATE (source)-[r:RELATES_TO {
    weight: toFloat(row.weight),
    description: row.description,
    id: row.id,
    human_readable_id: row.human_readable_id,
    source_degree: toInteger(row.source_degree),
    target_degree: toInteger(row.target_degree),
    rank: toInteger(row.rank)
}]->(target);

// 17. Community Report report on Community
MATCH (cr:CommunityReport)
MATCH (c:Community {id: cr.community})
CREATE (cr)-[:REPORTS_ON]->(c); 